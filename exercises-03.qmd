# Workshop

## Overview

In this workshop, you will explore spotify songs!

Please write up your solution using R Markdown and `knitr`. Please **show all your code** for each of the answers to each part.

At the end of the workshop, we will go over the answers.

## Data

That data for this part of the assignment comes from [TidyTuesday](https://www.tidytuesday.com), which is a weekly podcast and global [community activity](https://github.com/rfordatascience/tidytuesday) brought to you by the R4DS Online Learning Community. The goal of TidyTuesday is to help R learners learn in real-world contexts.

```{r tidy-data, echo = FALSE, fig.cap = "Icon from TidyTuesday", out.width = '60%', fig.align='center', preview = TRUE}
knitr::include_graphics("https://github.com/rfordatascience/tidytuesday/raw/master/static/tt_logo.png")
```

\[**Source**: [TidyTuesday](https://github.com/rfordatascience/tidytuesday/blob/master/static/tt_logo.png)\]

To access the data, you need to install the `tidytuesdayR` R package and use the function `tt_load()` with the date of '2020-01-21' to load the data.

```{r}
#| eval: false
install.packages("tidytuesdayR")
```

This is how you can download the data.

```{r}
#| eval: false
tuesdata <- tidytuesdayR::tt_load('2020-01-21')
spotify_songs <- tuesdata$spotify_songs
```

However, if you use this code, you will hit an API limit after trying to compile the document a few times. Instead, I suggest you use the following code below. Here, I provide the code below for you to avoid re-downloading data:

```{r, message=FALSE}
library(here)
library(tidyverse)

# tests if a directory named "data" exists locally
if(!dir.exists(here("data"))) { dir.create(here("data")) }

# saves data only once (not each time you knit a R Markdown)
if(!file.exists(here("data","spotify_songs.RDS"))) {
  url_csv <- 'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-21/spotify_songs.csv'
  spotify_songs <- readr::read_csv(url_csv)
  
  # save the file to RDS objects
  saveRDS(spotify_songs, file= here("data","spotify_songs.RDS"))
}
```

Here we read in the `.RDS` dataset locally from our computing environment:

```{r, eval=TRUE, message=FALSE}
spotify_songs <- readRDS(here("data","spotify_songs.RDS"))
as_tibble(spotify_songs)
```

We can take a glimpse at the data

```{r}
glimpse(spotify_songs)
```

For all of the questions below, you can ignore the missing values in the dataset, so e.g. when taking averages, just remove the missing values before taking the average, if needed.

## Tasks

Use functions from `dplyr` and `ggplot2` to answer the following questions.

1.  How many songs are in each genre?

```{r}
# Add your solution here

```

2.  What is average value of `energy` and `acousticness` in the `latin` genre in this dataset?

```{r}
# Add your solution here

```

3.  Calculate the average duration of song (in minutes) across all subgenres. Which subgenre has the longest song on average?

```{r}
# Add your solution here

```

4.  Make two boxplots side-by-side of the `danceability` of songs stratifying by whether a song has a fast or slow tempo. Define fast tempo as any song that has a `tempo` above its median value. On average, which songs are more danceable?

**Hint**: You may find the `case_when()` function useful in this part, which can be used to map values from one variable to different values in a new variable (when used in a `mutate()` call).

```{r}
#| message: false
## Generate some random numbers
dat <- tibble(x = rnorm(100))
slice(dat, 1:3)

## Create a new column that indicates whether the value of 'x' is positive or negative
dat %>%
        mutate(is_positive = case_when(
                x >= 0 ~ "Yes",
                x < 0 ~ "No"
        ))
```

```{r}
# Add your solution here

```
