{
  "hash": "09254e3c9bba55f517fea959cb4a5fff",
  "result": {
    "markdown": "# Workshop\n\n## Overview\n\nThe goal of this workshop is to build a workflow with some example single-cell RNA-seq data.\n\n## Data\n\nThe *[scRNAseq](https://bioconductor.org/packages/3.17/scRNAseq)* package provides convenient access to several publicly available data sets in the form of `SingleCellExperiment` objects. The focus of this package is to capture datasets that are not easily read into R with a one-liner from, e.g., `read_csv()`. Instead, the necessary data munging is already done so that users only need to call a single function to obtain a well-formed `SingleCellExperiment`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(scRNAseq)\n```\n:::\n\n\nTo see the list of available datasets, use the `listDatasets()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nout <- listDatasets() \nout\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDataFrame with 61 rows and 5 columns\n                 Reference  Taxonomy               Part    Number\n               <character> <integer>        <character> <integer>\n1   @aztekin2019identifi..      8355               tail     13199\n2   @bach2017differentia..     10090      mammary gland     25806\n3           @bacher2020low      9606            T cells    104417\n4     @baron2016singlecell      9606           pancreas      8569\n5     @baron2016singlecell     10090           pancreas      1886\n...                    ...       ...                ...       ...\n57    @zeisel2018molecular     10090     nervous system    160796\n58     @zhao2020singlecell      9606 liver immune cells     68100\n59    @zhong2018singlecell      9606  prefrontal cortex      2394\n60  @zilionis2019singlec..      9606               lung    173954\n61  @zilionis2019singlec..     10090               lung     17549\n                      Call\n               <character>\n1        AztekinTailData()\n2        BachMammaryData()\n3        BacherTCellData()\n4   BaronPancreasData('h..\n5   BaronPancreasData('m..\n...                    ...\n57     ZeiselNervousData()\n58   ZhaoImmuneLiverData()\n59   ZhongPrefrontalData()\n60      ZilionisLungData()\n61  ZilionisLungData('mo..\n```\n:::\n:::\n\n\nYou can load a dataset the following way:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsce <- ZeiselBrainData()\nsce\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass: SingleCellExperiment \ndim: 20006 3005 \nmetadata(0):\nassays(1): counts\nrownames(20006): Tspan12 Tshz1 ... mt-Rnr1 mt-Nd4l\nrowData names(1): featureType\ncolnames(3005): 1772071015_C02 1772071017_G12 ... 1772066098_A12\n  1772058148_F03\ncolData names(10): tissue group # ... level1class level2class\nreducedDimNames(0):\nmainExpName: endogenous\naltExpNames(2): ERCC repeat\n```\n:::\n:::\n\n\n## Tasks\n\n1.  Pick a scRNA-seq dataset that has more than 5,000 cells and load the `SingleCellExperiment` (or `sce`) object.\n\n2.  Show the number of number of genes and number of observations in the `sce` object.\n\n3.  Using the material we learned in the lecture, analyze the scRNA-seq data using the Biocondutor packages we learned about. This should include (but not be limited to)\n\n    -   Quality control (you must use at least two different QC metrics)\n    -   Normalization\n    -   Feature selection using highly variable genes\n    -   Dimensionality reduction using PCA\n    -   Data visualization using tSNE or UMAP\n    -   Unsupervised clustering (your choice of method!)\n\n4.  At the end of your analysis, show a plot of both (i) the PCA plot and (ii) either the tSNE or UMAP plot with the colors represented by the predicted labels from the clustering algorithm.\n\n5.  For each component described in Task #3, write 3-4 sentences naming and describing the idea behind the methodology you used, along with interpreting the output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add your solution here\n```\n:::\n\n\n### Useful tips\n\n-   If the original dataset was not provided with Ensembl annotation, we can map the identifiers with `ensembl=TRUE`. Any genes without a corresponding `Ensembl` identifier is discarded from the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsce <- ZeiselBrainData(ensembl=TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Unable to map 1565 of 20006 requested IDs.\n```\n:::\n\n```{.r .cell-code}\nhead(rownames(sce))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"ENSMUSG00000029669\" \"ENSMUSG00000046982\" \"ENSMUSG00000039735\"\n[4] \"ENSMUSG00000033453\" \"ENSMUSG00000046798\" \"ENSMUSG00000034009\"\n```\n:::\n:::\n",
    "supporting": [
      "exercises-04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}